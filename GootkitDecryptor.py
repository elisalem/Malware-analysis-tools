import pefile
import binascii
import re
import sys

# This script receive file path and decobfuscade the xor encryption of gootkit malware - made by Eli Salem

def decXor(encryptedStr,key):         # decrypt xor
    dec =''

    for i in range(0,len(encryptedStr)):
        dec += chr(ord(encryptedStr[i]) ^ ord(key[i%len(key)]))

    return dec


def extractDataFromBinary(file):                # extract the data from .data section
    test = '.data'
    pe = pefile.PE(file)
    for section in pe.sections:
        if test in  section.Name:
            return section.get_data()


def dataAlignment(data):                       # cut and allign the extracted data
    returnhex = binascii.hexlify(data)
    returnhex2 = re.sub('00',' ',returnhex)
    returnhex3 = re.sub('026358575d19705c52574c0e515',' ',returnhex2 )
    returnhex4 = re.sub('04b51525554040b16535554',' ',returnhex3 )


    r = returnhex4.split(" ")


    for i in r:
        if "" in i:
            del r[r.index("")]


    final = r[0:85]


    for i in final:
        if len(i) < 10:
            del final[final.index(i)]
    return final


def printXoredData(xoredData, key):
    count = 0
    for t in xoredData:
            count += 1
            if count < 17:
                unhexstr = binascii.unhexlify(t)
                dexorstr = decXor(unhexstr,key)
                print(dexorstr)



def main():

    myfile = raw_input('enter binary path: ')
    print(myfile)

    key = '89798798798g79er$'                       # set key



    returned = extractDataFromBinary(myfile)   # send file to extractedData function and return what been extracted

    dataAligned = dataAlignment(returned)     # cut and allign the extracted data

    printXoredData(dataAligned, key)         # send the data and the key, decrypt and print







if __name__ == '__main__':
    main()




